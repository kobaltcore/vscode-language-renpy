{
  "Timed Choice": {
    "prefix": "timedchoice",
    "body": "timedchoice ${1:duration} ${2:label}",
    "description": ""
  },
  "Phone Call": {
    "prefix": "phone_call",
    "body": "phone_call ${1:character} ${2:expression} @ ${3:location} : ${4:character} ${5:expression} @ ${6:location}",
    "description": ""
  },
  "Alien Particles": {
    "prefix": "particles",
    "body": ["show expression alien_particles(400, 190, 190, mind_scale) as particles:", "xpos placement_of(${1:character}).xpos", "ypos 0.27", "alien_particles_fadeinout()", "\"${2:narration}$0\"", "hide particles"],
    "description": ""
  },
  "Change Body": {
    "prefix": "body",
    "body": "body ${1:character} ${2:body}",
    "description": ""
  },
  "Change Outfit": {
    "prefix": "outfit",
    "body": "outfit ${1:character} ${2:outfit}",
    "description": ""
  },
  "Set Accessory": {
    "prefix": "accessory set",
    "body": "accessory ${1:character} set ${2:accessories}",
    "description": ""
  },
  "Accessory Clear": {
    "prefix": "accessory clear",
    "body": "accessory ${1:[character]} clear",
    "description": ""
  },
  "Full Text Message": {
    "prefix": "text",
    "body": ["text start ${1:character}", "text title \"${2:title}\"", "msg ${3:character} \"${4:message}\"", "text end"],
    "description": ""
  },
  "Start Text": {
    "prefix": "text start",
    "body": "text start ${1:character}",
    "description": ""
  },
  "Text Title": {
    "prefix": "text title",
    "body": "text title \"${1:title}\"",
    "description": ""
  },
  "End Text": {
    "prefix": "text end",
    "body": "text end",
    "description": ""
  },
  "Text Message": {
    "prefix": "msg",
    "body": "msg ${1:character} \"${2:message}\"",
    "description": ""
  },
  "Morph": {
    "prefix": "morph",
    "body": ["morph begin ${1|magic,alien|} ${2:from_character} ${3:to_character} ${4:target_outfit} ${5:target_expression}", "morph do ${3:to_character}", "morph end ${3:to_character}", "morph finish ${3:to_character}"],
    "description": "Morph one person into another."
  },
  "Begin Morph": {
    "prefix": "morph begin",
    "body": "morph begin ${1|magic,alien|} ${2:from_character} ${3:to_character} ${4:target_outfit} ${5:target_expression}",
    "description": ""
  },
  "Do Morph": {
    "prefix": "morph do",
    "body": "morph do ${1:character}",
    "description": ""
  },
  "End Morph": {
    "prefix": "morph end",
    "body": "morph enf ${1:character}",
    "description": ""
  },
  "Finish Morph": {
    "prefix": "morph finish",
    "body": "morph finish ${1:character}",
    "description": ""
  },
  "Swap": {
    "prefix": "swap",
    "body": "swap ${1|float,zap|} ${2:from_character} ${3:start_expr} : ${4:end_expr}, ${5:to_character} ${6:start_expr} : ${7:end_expr}",
    "description": ""
  },
  "Exspirit": {
    "prefix": "exspirit",
    "body": "exspirit ${1:character} ${2:expression}",
    "description": ""
  },
  "Possess": {
    "prefix": "possess",
    "body": "possess ${1:from_character} ${2:to_character} ${3:end_expr}",
    "description": ""
  },
  "Pentagram": {
    "prefix": "pentagram",
    "body": ["show pentagram at center behind ${1:character} as pentagram", "\"${2:narration}$0\"", "hide pentagram"],
    "description": ""
  },
  "Scry": {
    "prefix": "scry",
    "body": ["scry into ${1:into_character}", "\"${2:narration}\"", "scene ${3:image}", "show ${4:outof_character} ${5:outof_character_expr} at ${6:position}", "scry outof ${4:outof_character}"],
    "description": ""
  },
  "Scry Into": {
    "prefix": "scry into",
    "body": "scry into ${1:character}",
    "description": ""
  },
  "Scry Out Of": {
    "prefix": "scry outof",
    "body": "scry outof ${1:character}",
    "description": ""
  },
  "Label": {
    "prefix": "label",
    "body": "label ${1:label_name}:\n\t${2:}",
    "description": "Create a new label."
  },
  "Jump": {
    "prefix": "jump",
    "body": "jump ${1:label_name}",
    "description": "Jump to a label."
  },
  "Call": {
    "prefix": "call",
    "body": "call ${1:label_name}",
    "description": "Call a label."
  },
  "Pause": {
    "prefix": "pause",
    "body": "with Pause($1)\n$2",
    "description": "Wait a few seconds before showing the next screen."
  },
  "One Line Python": {
    "prefix": "p1",
    "body": "$ ${1:#python statements}",
    "description": "Execute a single line of Python."
  },
  "Python in Block": {
    "prefix": "py",
    "body": "python:\n\t${1:}",
    "description": "The python statement takes a block of python code."
  },
  "Init Block": {
    "prefix": "init",
    "body": "init ${1:#priority number}:\n\t${2:}",
    "description": "Run code at initialization time."
  },
  "Init with Python Block": {
    "prefix": "inipy",
    "body": "init ${1:#priority number} python:\n\t${2:}",
    "description": "init block with a Python block"
  },
  "Create a Character": {
    "prefix": "char",
    "body": "define ${1:character_name} = Character(\"${2:displayable name}\")",
    "description": "Create a Character"
  },
  "Create a Character (NVL)": {
    "prefix": "charnvl",
    "body": "define ${1:character_name} = Character(None, kind=nvl)\n${2:}",
    "description": "Create a Character (NVL)"
  },
  "PreDefined Transitions": {
    "prefix": "transitions",
    "body": "${1:fade, dissolve, pixellate, move,\nmoveinright (Also: moveinleft, moveintop, moveinbottom),\nmoveoutright (Also: moveoutleft, moveouttop, moveoutbottom),\nease (Also: easeinright, easeinleft, easeintop, easeinbottom, easeoutright, easeoutleft, easeouttop, easeoutbottom),\nzoomin, zoomout, zoominout, vpunch, hpunch, blinds, squares,\nwipeleft (Also: wiperight, wipeup, wipedown),\nslideleft (Also:  slideright, slideup, slidedown),\nslideawayleft (Also: slideawayright, slideawayup, slideawaydown),\nirisin, irisout.}",
    "description": "Predefined Transitions"
  },
  "Create MultiPersistent": {
    "prefix": "multipersist",
    "body": "${1:persistent_name} = MultiPersistent(\"${2:persistent_filename}\")",
    "description": "Create MultiPersistent"
  },
  "Variable(Create/Modify)": {
    "prefix": "var",
    "body": "$ ${1:variable_name} = ${2:# variable value}",
    "description": "Create/Modify variable."
  },
  "Variable(Create/Modify) ": {
    "prefix": "$",
    "body": "$ ${1:variable_name} = ${2:# variable value}",
    "description": "Create/Modify variable."
  },
  "Renpy Pause": {
    "prefix": "rpause",
    "body": "$ renpy.pause($1)\n$2",
    "description": "Ren'Py pause."
  },
  "Movie Cutscene": {
    "prefix": "cutscene",
    "body": "$ renpy.movie_cutscene('${1:file_name.extension}')",
    "description": "Movie Cutscene"
  },
  "Save Persistent": {
    "prefix": "persist",
    "body": "$ persistent.${1:attribute_name} = ${2:# variable value}",
    "description": "Save Persistent."
  },
  "Save MultiPersistent": {
    "prefix": "multisave",
    "body": "$ ${1:persistent_name}.save()",
    "description": "Save MultiPersistent"
  },
  "Fade": {
    "prefix": "wFade",
    "body": "with fade",
    "description": "Fade"
  },
  "Dissolve": {
    "prefix": "wDissolve",
    "body": "with dissolve",
    "description": "Dissolve"
  },
  "Pixellate": {
    "prefix": "wPixel",
    "body": "with pixellate",
    "description": "Pixellate"
  },
  "Move": {
    "prefix": "wMove",
    "body": "with move",
    "description": "Move"
  },
  "Move in Right": {
    "prefix": "wMoveInRight",
    "body": "with moveinright",
    "description": "Move in Right"
  },
  "Move in Left": {
    "prefix": "wMoveInLeft",
    "body": "with moveinleft",
    "description": "Move in Left"
  },
  "Move in Top": {
    "prefix": "wMoveInTop",
    "body": "with moveintop",
    "description": "Move in Top"
  },
  "Move in Bottom": {
    "prefix": "wMoveInBottom",
    "body": "with moveinbottom",
    "description": "Move in Bottom"
  },
  "If (Conditional Statement)": {
    "prefix": "if",
    "body": "if ${1:condition}:\n\t${2:#block of code to run}",
    "description": "If (Conditional Statement)"
  },
  "Else If (Conditional Statement)": {
    "prefix": "elif",
    "body": "elif ${1:condition}:\n\t${2:#block of code to run}",
    "description": "Else If (Conditional Statement)"
  },
  "Else (Conditional Statement)": {
    "prefix": "else",
    "body": "else:\n\t${1:#block of code to run}",
    "description": "Else (Conditional Statement)"
  },
  "While (Loop)": {
    "prefix": "while",
    "body": "while ${1:condition}:\n\t${2:#block of code to run}",
    "description": "While (Loop)"
  },
  "Choice Menu": {
    "prefix": "menu",
    "body": "menu ${1:optional_name}:\n\t\"${2:Say Statement}\"\n\t\"${3:Choice 1}\":\n\t\t#block of code to run\n\t\"${4:Choice 2}\":\n\t\t#block of code to run\n\t${5:}",
    "description": "Choice Menu"
  },
  "Menu Choice": {
    "prefix": "choice",
    "body": "\"${1:Choice N}\":\n\t${2:#block of code to run}\n\t$3",
    "description": "Menu Choice"
  },
  "Ren'Py Docs": {
    "prefix": "dochelp",
    "body": "## Visit the site for documentation or help of Ren'Py engine. ##\n## Documentation:\n\t\"${1:http://www.renpy.org/doc/html/}\"\n## Wiki-Old Documentation:\n\t\"${2:http://www.renpy.org/wiki/renpy/Wiki_Home_Page}\"\n## Forum:\n\t\"${3:http://lemmasoft.renai.us/forums/viewforum.php?f=42}\"\n## Extension Documentation:\n\t\"${4:https://github.com/LuqueDaniel/vscode-language-renpy}\"",
    "description": "Show docs/useful urls"
  },
  "Assert Equal": {
    "prefix": ",ase",
    "body": "self.assertEqual(${1:expected}, ${2:actual}${3:, '${4:message}'})$0",
    "description": "Assert Equal"
  },
  "Assert Not Equal": {
    "prefix": ",asne",
    "body": "self.assertNotEqual(${1:expected}, ${2:actual}${3:, '${4:message}'})$0",
    "description": "Assert Not Equal"
  },
  "Assert Raises": {
    "prefix": ",asr",
    "body": "self.assertRaises(${1:exception}, ${2:callable})$0",
    "description": "Assert Raises"
  },
  "Assert True": {
    "prefix": ",ast",
    "body": "self.assertTrue(${1:actual}${2:, '${3:message}'})$0",
    "description": "Assert True"
  },
  "Assert False": {
    "prefix": ",asf",
    "body": "self.assertFalse(${1:actual}${2:, '${3:message}'})$0",
    "description": "Assert False"
  },
  "Assert Is": {
    "prefix": ",asi",
    "body": "self.assertIs(${1:expected}, ${2:actual}${3:, '${4:message}'})$0",
    "description": "Assert Is"
  },
  "Assert Is Not": {
    "prefix": ",asint",
    "body": "self.assertIsNot(${1:expected}, ${2:actual}${3:, '${4:message}'})$0",
    "description": "Assert Is Not"
  },
  "Assert Is None": {
    "prefix": ",asino",
    "body": "self.assertIsNone(${1:actual}${2:, '${3:message}'})$0",
    "description": "Assert Is None"
  },
  "Assert Is Not None": {
    "prefix": ",asinno",
    "body": "self.assertIsNotNone(${1:actual}${2:, '${3:message}'})$0",
    "description": "Assert Is Not None"
  },
  "Assert In": {
    "prefix": ",asin",
    "body": "self.assertIn(${1:needle}, ${2:haystack}${3:, '${4:message}'})$0",
    "description": "Assert In"
  },
  "Assert Not In": {
    "prefix": ",asni",
    "body": "self.assertNotIn(${1:needle}, ${2:haystack}${3:, '${4:message}'})$0",
    "description": "Assert Not In"
  },
  "Assert": {
    "prefix": ",as",
    "body": "self.assert_(${1:boolean expression}${2:, '${3:message}'})$0",
    "description": "Assert"
  },
  "Fail (a test)": {
    "prefix": "fail",
    "body": "self.fail('${1:message}')$0",
    "description": "Fail (a test)"
  },
  "New Class": {
    "prefix": "class",
    "body": "class ${1:ClassName}(${2:object}):\n\t\"\"\"${3:docstring for $1}\"\"\"\n\tdef __init__(self, ${4:arg}):\n\t\t${5:super($1, self).__init__()}\n\t\tself.arg = arg\n\t\t$0",
    "description": "New Class"
  },
  "New Method": {
    "prefix": "defs",
    "body": "def ${1:mname}(self, ${2:arg}):\n\t${3:pass}",
    "description": "New Method"
  },
  "New Function": {
    "prefix": "def",
    "body": "def ${1:fname}(${2:arg}):\n\t${3:pass}",
    "description": "New Function"
  },
  "New Property": {
    "prefix": "property",
    "body": "def ${1:foo}():\n    doc = \"${2:The $1 property.}\"\n    def fget(self):\n        ${3:return self._$1}\n    def fset(self, value):\n        ${4:self._$1 = value}\n    def fdel(self):\n        ${5:del self._$1}\n    return locals()\n$1 = property(**$1())$0",
    "description": "New Property"
  },
  "For (Loop)": {
    "prefix": "for",
    "body": "for ${1:value} in ${2:variable}:\n\t${3:pass}",
    "description": "For (Loop)"
  },
  "Try/Except": {
    "prefix": "try",
    "body": "try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}",
    "description": "Try/Except"
  },
  "List Comprehension": {
    "prefix": "lc",
    "body": "[${1:value} for ${2:value} in ${3:variable}]",
    "description": "List Comprehension"
  },
  "List Comprehension If Else": {
    "prefix": "lcie",
    "body": "[${1:value} if ${2:condition} else ${3:condition} for ${4:value} in ${5:variable}]",
    "description": "List Comprehension If Else"
  },
  "Dictionary Comprehension": {
    "prefix": "dc",
    "body": "{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:variable}}",
    "description": "Dictionary Comprehension"
  },
  "PDB set trace": {
    "prefix": "pdb",
    "body": "import pdb; pdb.set_trace()\n",
    "description": "PDB set trace"
  },
  "iPDB set trace": {
    "prefix": "ipdb",
    "body": "import ipdb; ipdb.set_trace()\n",
    "description": "iPDB set trace"
  },
  "__magic__": {
    "prefix": "__",
    "body": "__${1:init}__",
    "description": "__magic__"
  },
  "Anchor Tag": {
    "prefix": "a",
    "body": "{a=${1:url}}$2{/a}",
    "description": "Anchor Tag"
  },
  "Alpha Tag": {
    "prefix": "al",
    "body": "{alpha=${1:alpha value}}$2{/alpha}",
    "description": "Alpha Tag"
  },
  "Bold Tag": {
    "prefix": "b",
    "body": "{b}$1{/b}",
    "description": "Bold Tag"
  },
  "Color Tag": {
    "prefix": "c",
    "body": "{color=${1:color code}}$2{/color}",
    "description": "Color Tag"
  },
  "Characters per second Tag": {
    "prefix": "cp",
    "body": "{cps=${1:characters per second}}$2{/cps}",
    "description": "Characters per second Tag"
  },
  "Font Tag": {
    "prefix": "f",
    "body": "{font=${1:font file}}$2{/font}",
    "description": "Font Tag"
  },
  "Italics Tag": {
    "prefix": "i",
    "body": "{i}$1{/i}",
    "description": "Italics Tag"
  },
  "Kerning Tag": {
    "prefix": "k",
    "body": "{k=${1:adjust value}}$2{/k}",
    "description": "Kerning Tag"
  },
  "Image Tag": {
    "prefix": "im",
    "body": "{image=${1:image file}}",
    "description": "Image Tag"
  },
  "Strikethrough Tag": {
    "prefix": "s",
    "body": "{s}$1{/s}",
    "description": "Strikethrough Tag"
  },
  "Ruby Text Top Tag": {
    "prefix": "rt",
    "body": "{rt}$1{/rt}",
    "description": "Ruby Text Top Tag"
  },
  "Ruby Text Bottom Tag": {
    "prefix": "rb",
    "body": "{rb}$1{/rb}",
    "description": "Ruby Text Bottom Tag"
  },
  "Size Tag": {
    "prefix": "si",
    "body": "{size=${1:size value}}$2{/size}",
    "description": "Size Tag"
  },
  "Space Tag": {
    "prefix": "sp",
    "body": "{space=${1:space size}}",
    "description": "Space Tag"
  },
  "Underline Tag": {
    "prefix": "u",
    "body": "{u}$1{/u}",
    "description": "Underline Tag"
  },
  "Vertical space Tag": {
    "prefix": "v",
    "body": "{vspace=${1:space size}}",
    "description": "Vertical space Tag"
  },
  "Fast Tag": {
    "prefix": "fa",
    "body": "{fast}",
    "description": "Fast Tag"
  },
  "No-wait Tag": {
    "prefix": "n",
    "body": "{nw}",
    "description": "No-wait Tag"
  },
  "Paragraph Tag": {
    "prefix": "p",
    "body": "{p}",
    "description": "Paragraph Tag"
  },
  "Wait Paragraph Tag": {
    "prefix": "pp",
    "body": "{p=${1:wait time}}",
    "description": "Wait Paragraph Tag"
  },
  "Wait Tag": {
    "prefix": "w",
    "body": "{w}",
    "description": "Wait Tag"
  },
  "Wait time Tag": {
    "prefix": "ww",
    "body": "{w=${1:wait time}}",
    "description": "Wait time Tag"
  }
}